/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlayerProfileService } from "../playerProfile.service";
import { PlayerProfileCreateInput } from "./PlayerProfileCreateInput";
import { PlayerProfile } from "./PlayerProfile";
import { PlayerProfileFindManyArgs } from "./PlayerProfileFindManyArgs";
import { PlayerProfileWhereUniqueInput } from "./PlayerProfileWhereUniqueInput";
import { PlayerProfileUpdateInput } from "./PlayerProfileUpdateInput";

export class PlayerProfileControllerBase {
  constructor(protected readonly service: PlayerProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerProfile })
  async createPlayerProfile(
    @common.Body() data: PlayerProfileCreateInput
  ): Promise<PlayerProfile> {
    return await this.service.createPlayerProfile({
      data: {
        ...data,

        team: data.team
          ? {
              connect: data.team,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        position: true,
        skills: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerProfile] })
  @ApiNestedQuery(PlayerProfileFindManyArgs)
  async playerProfiles(
    @common.Req() request: Request
  ): Promise<PlayerProfile[]> {
    const args = plainToClass(PlayerProfileFindManyArgs, request.query);
    return this.service.playerProfiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        position: true,
        skills: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async playerProfile(
    @common.Param() params: PlayerProfileWhereUniqueInput
  ): Promise<PlayerProfile | null> {
    const result = await this.service.playerProfile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        position: true,
        skills: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlayerProfile(
    @common.Param() params: PlayerProfileWhereUniqueInput,
    @common.Body() data: PlayerProfileUpdateInput
  ): Promise<PlayerProfile | null> {
    try {
      return await this.service.updatePlayerProfile({
        where: params,
        data: {
          ...data,

          team: data.team
            ? {
                connect: data.team,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          position: true,
          skills: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlayerProfile(
    @common.Param() params: PlayerProfileWhereUniqueInput
  ): Promise<PlayerProfile | null> {
    try {
      return await this.service.deletePlayerProfile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          position: true,
          skills: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
