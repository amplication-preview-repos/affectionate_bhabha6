/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlayerProfile } from "./PlayerProfile";
import { PlayerProfileCountArgs } from "./PlayerProfileCountArgs";
import { PlayerProfileFindManyArgs } from "./PlayerProfileFindManyArgs";
import { PlayerProfileFindUniqueArgs } from "./PlayerProfileFindUniqueArgs";
import { CreatePlayerProfileArgs } from "./CreatePlayerProfileArgs";
import { UpdatePlayerProfileArgs } from "./UpdatePlayerProfileArgs";
import { DeletePlayerProfileArgs } from "./DeletePlayerProfileArgs";
import { Team } from "../../team/base/Team";
import { PlayerProfileService } from "../playerProfile.service";
@graphql.Resolver(() => PlayerProfile)
export class PlayerProfileResolverBase {
  constructor(protected readonly service: PlayerProfileService) {}

  async _playerProfilesMeta(
    @graphql.Args() args: PlayerProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlayerProfile])
  async playerProfiles(
    @graphql.Args() args: PlayerProfileFindManyArgs
  ): Promise<PlayerProfile[]> {
    return this.service.playerProfiles(args);
  }

  @graphql.Query(() => PlayerProfile, { nullable: true })
  async playerProfile(
    @graphql.Args() args: PlayerProfileFindUniqueArgs
  ): Promise<PlayerProfile | null> {
    const result = await this.service.playerProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerProfile)
  async createPlayerProfile(
    @graphql.Args() args: CreatePlayerProfileArgs
  ): Promise<PlayerProfile> {
    return await this.service.createPlayerProfile({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PlayerProfile)
  async updatePlayerProfile(
    @graphql.Args() args: UpdatePlayerProfileArgs
  ): Promise<PlayerProfile | null> {
    try {
      return await this.service.updatePlayerProfile({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerProfile)
  async deletePlayerProfile(
    @graphql.Args() args: DeletePlayerProfileArgs
  ): Promise<PlayerProfile | null> {
    try {
      return await this.service.deletePlayerProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(@graphql.Parent() parent: PlayerProfile): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
