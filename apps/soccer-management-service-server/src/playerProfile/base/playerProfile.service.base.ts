/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlayerProfile as PrismaPlayerProfile,
  Team as PrismaTeam,
} from "@prisma/client";

export class PlayerProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerProfileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerProfile.count(args);
  }

  async playerProfiles(
    args: Prisma.PlayerProfileFindManyArgs
  ): Promise<PrismaPlayerProfile[]> {
    return this.prisma.playerProfile.findMany(args);
  }
  async playerProfile(
    args: Prisma.PlayerProfileFindUniqueArgs
  ): Promise<PrismaPlayerProfile | null> {
    return this.prisma.playerProfile.findUnique(args);
  }
  async createPlayerProfile(
    args: Prisma.PlayerProfileCreateArgs
  ): Promise<PrismaPlayerProfile> {
    return this.prisma.playerProfile.create(args);
  }
  async updatePlayerProfile(
    args: Prisma.PlayerProfileUpdateArgs
  ): Promise<PrismaPlayerProfile> {
    return this.prisma.playerProfile.update(args);
  }
  async deletePlayerProfile(
    args: Prisma.PlayerProfileDeleteArgs
  ): Promise<PrismaPlayerProfile> {
    return this.prisma.playerProfile.delete(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.playerProfile
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
